(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';
var angular, app, d3;

angular = require('angular');

d3 = require('d3');

app = angular.module('mainApp', [require('angular-material')]).directive('gridDer', require('./components/grid/grid')).directive('circleDer', require('./components/grid/circle')).directive('shifter', require('./directives/shifter'));



},{"./components/grid/circle":2,"./components/grid/grid":3,"./directives/shifter":4,"angular":undefined,"angular-material":undefined,"d3":undefined}],2:[function(require,module,exports){
var Ctrl, _, der, template;

require('../../helpers');

_ = require('lodash');

template = '<svg ng-attr-width=\'{{::vm.width+vm.mar.left+vm.mar.right}}\' ng-attr-height=\'{{::vm.height + vm.mar.top +vm.mar.bottom}}\' class=\'bottomChart\' >\n	<g class=\'main\' shifter=\'[vm.mar.left, vm.mar.top]\'>\n		<circle class=\'background\' ng-attr-r=\'{{vm.height/2}}\' shifter=\'[vm.width/2, vm.height/2]\'/>\n		<g class=\'g-dots\' shifter=\'[vm.width/2,-vm.height/2]\'></g>\n	</g>\n</svg>\n<svg width=\'75\' ng-attr-height=\'{{::vm.height + vm.mar.top +vm.mar.bottom}}\' >\n	<g class=\'main\' shifter=\'[vm.mar.left, vm.mar.top]\'>\n		<rect class=\'avg\' width=\'75\' ng-attr-y=\'{{vm.height - vm.avg}}\' ng-attr-height=\'{{vm.avg}}\'/>\n	</g>\n</svg>';

Ctrl = (function() {
  function Ctrl(scope, el, window) {
    var H, V, averages, avg, g, lengths, lines, samp;
    this.scope = scope;
    this.el = el;
    this.window = window;
    this.width = 500;
    this.height = 500;
    this.mar = {
      left: 20,
      top: 10,
      right: 15,
      bottom: 30
    };
    V = d3.scale.linear().domain([0, 50]).range([this.height, 0]);
    H = d3.scale.linear().domain([0, 50]).range([0, this.width]);
    samp = function() {
      var r, res, t, u;
      t = 2 * Math.PI * Math.random();
      u = Math.random() + Math.random();
      r = u > 1 ? 2 - u : u;
      return res = {
        theta: t,
        r: r * 25
      };
    };
    this.lines = [];
    _.range(0, 2000).forEach((function(_this) {
      return function() {
        var a, b, res, which;
        a = samp();
        b = samp();
        if (Math.abs(a.theta - b.theta) < 2) {
          if (a.r <= b.r) {
            which = +((a.theta - b.theta) > 0);
            res = "M " + (H(a.r * Math.cos(a.theta))) + " " + (V(a.r * Math.sin(a.theta))) + " A " + (H(a.r)) + " , " + (H(a.r)) + " 0  0," + which + " " + (H(a.r * Math.cos(b.theta))) + " " + (V(a.r * Math.sin(b.theta))) + " L " + (H(b.r * Math.cos(b.theta))) + " " + (V(b.r * Math.sin(b.theta)));
            return _this.lines.push(res);
          } else {
            which = +((a.theta - b.theta) < 0);
            res = "M " + (H(b.r * Math.cos(b.theta))) + "  " + (V(b.r * Math.sin(b.theta))) + " A " + (H(b.r)) + " , " + (H(b.r)) + " 0  0," + which + " " + (H(b.r * Math.cos(a.theta))) + " " + (V(b.r * Math.sin(a.theta))) + " L " + (H(a.r * Math.cos(a.theta))) + " " + (V(a.r * Math.sin(a.theta)));
            return _this.lines.push(res);
          }
        } else {
          res = "M " + (H(a.r * Math.cos(a.theta))) + "  " + (V(a.r * Math.sin(a.theta))) + " L " + (H(0)) + " " + (V(0)) + " L " + (H(b.r * Math.cos(b.theta))) + "  " + (V(b.r * Math.sin(b.theta)));
          return _this.lines.push(res);
        }
      };
    })(this));
    g = d3.select(this.el[0]).select('.main');
    lines = g.select('.g-dots').selectAll('lines').data(this.lines.map(function(d) {
      var res;
      return res = {
        line: d,
        l: 0
      };
    })).enter().append('path').attr({
      "class": 'route',
      d: function(d) {
        return d.line;
      }
    });
    lengths = [];
    lines.attr('stroke-dasharray', function(d) {
      var l;
      l = d3.select(this).node().getTotalLength();
      lengths.push(l);
      return l + "," + l;
    }).attr({
      'stroke-dashoffset': function(d) {
        var l;
        l = d3.select(this).node().getTotalLength();
        return l;
      }
    });
    avg = 0;
    averages = lengths.map(function(l, i) {
      return avg = (avg * i + l) / (i + 1);
    });
    this.avg = 0;
    console.log(averages);
    lines.transition().ease('cubic').duration(1200).delay(function(d, i) {
      return 1500 + i * 8;
    }).attr('stroke-dashoffset', 0).each('end', (function(_this) {
      return function(d, i) {
        _this.avg = averages[i];
        return _this.scope.$evalAsync();
      };
    })(this));
  }

  return Ctrl;

})();

der = function() {
  var directive;
  return directive = {
    controllerAs: 'vm',
    scope: {},
    template: template,
    templateNamespace: 'svg',
    controller: ['$scope', '$element', '$window', Ctrl]
  };
};

module.exports = der;



},{"../../helpers":5,"lodash":undefined}],3:[function(require,module,exports){
var Ctrl, _, der, template;

require('../../helpers');

_ = require('lodash');

template = '<svg ng-attr-width=\'{{::vm.width+vm.mar.left+vm.mar.right}}\' ng-attr-height=\'{{::vm.height + vm.mar.top +vm.mar.bottom}}\'  >\n	<g class=\'main\' shifter=\'[vm.mar.left, vm.mar.top]\'>\n		<rect class=\'background\' ng-attr-width=\'{{::vm.width}}\' ng-attr-height=\'{{::vm.height}}\'/>\n		<g class=\'g-dots\'></g>\n	</g>\n</svg>\n<svg width=\'75\' ng-attr-height=\'{{::vm.height + vm.mar.top +vm.mar.bottom}}\' >\n	<g class=\'main\' shifter=\'[vm.mar.left, vm.mar.top]\'>\n		<rect class=\'avg\' width=\'75\' ng-attr-y=\'{{vm.height - vm.average}}\' ng-attr-height=\'{{vm.average }}\'/>\n	</g>\n</svg>';

Ctrl = (function() {
  function Ctrl(scope, el, window, element) {
    var averages, avg, g, lengths, lines, which;
    this.scope = scope;
    this.el = el;
    this.window = window;
    this.element = element;
    this.width = 500;
    this.height = 500;
    this.mar = {
      left: 5,
      top: 10,
      right: 5,
      bottom: 30
    };
    this.Ver = d3.scale.linear().domain([0, 50]).range([this.height, 0]);
    this.Hor = d3.scale.linear().domain([0, 50]).range([0, this.width]);
    this.lines = [];
    which = true;
    _.range(0, 2000).forEach((function(_this) {
      return function(i) {
        var d;
        d = [
          {
            x: Math.random() * 50,
            y: Math.random() * 50
          }, {
            x: Math.random() * 50,
            y: Math.random() * 50
          }
        ];
        _this.lines.push([
          d[0], (which ? {
            x: d[0].x,
            y: d[1].y
          } : {
            x: d[1].x,
            y: d[0].y
          }), d[1]
        ]);
        return which = !which;
      };
    })(this));
    this.lineFun = d3.svg.line().x((function(_this) {
      return function(d) {
        return _this.Hor(d.x);
      };
    })(this)).y((function(_this) {
      return function(d) {
        return _this.Ver(d.y);
      };
    })(this));
    g = d3.select(this.element[0]).select('.main');
    lines = g.select('.g-dots').selectAll('lines').data(this.lines).enter().append('path').attr({
      "class": 'route',
      d: this.lineFun
    });
    lengths = [];
    lines.attr('stroke-dasharray', function(d) {
      var l;
      l = d3.select(this).node().getTotalLength();
      lengths.push(l);
      return l + "," + l;
    }).attr({
      'stroke-dashoffset': function(d) {
        var l;
        l = d3.select(this).node().getTotalLength();
        return l;
      }
    });
    avg = 0;
    averages = lengths.map(function(l, i) {
      return avg = (avg * i + l) / (i + 1);
    });
    this.average = 0;
    lines.transition('hello').ease('cubic').duration(500).delay(function(d, i) {
      return i * 5;
    }).attr('stroke-dashoffset', 0).transition('').each('end', (function(_this) {
      return function(d, i) {
        _this.average = averages[i];
        return _this.scope.$evalAsync();
      };
    })(this));
  }

  return Ctrl;

})();

der = function() {
  var directive;
  return directive = {
    controllerAs: 'vm',
    scope: {},
    template: template,
    templateNamespace: 'svg',
    controller: ['$scope', '$element', '$window', '$element', Ctrl]
  };
};

module.exports = der;



},{"../../helpers":5,"lodash":undefined}],4:[function(require,module,exports){
var d3, der;

d3 = require('d3');

der = function($parse) {
  var directive;
  return directive = {
    restrict: 'A',
    link: function(scope, el, attr) {
      var reshift, sel, tran, u;
      sel = d3.select(el[0]);
      u = 't-' + Math.random();
      tran = $parse(attr.tran)(scope);
      reshift = function(v) {
        if (tran) {
          sel.transition(u).attr('transform', "translate(" + v[0] + "," + v[1] + ")").call(tran);
        } else {
          sel.attr('transform', "translate(" + v[0] + "," + v[1] + ")");
        }
        return d3.select(el[0]);
      };
      return scope.$watch(function() {
        return $parse(attr.shifter)(scope);
      }, reshift, true);
    }
  };
};

module.exports = der;



},{"d3":undefined}],5:[function(require,module,exports){
'use strict';
module.exports.timeout = function(fun, time) {
  return d3.timer((function(_this) {
    return function() {
      fun();
      return true;
    };
  })(this), time);
};

Function.prototype.property = function(prop, desc) {
  return Object.defineProperty(this.prototype, prop, desc);
};



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvbGV3aXMvUmVzZWFyY2gvb2xkL3JvdXRlcy9hcHAvYXBwLmNvZmZlZSIsIi9Vc2Vycy9sZXdpcy9SZXNlYXJjaC9vbGQvcm91dGVzL2FwcC9jb21wb25lbnRzL2dyaWQvY2lyY2xlLmNvZmZlZSIsIi9Vc2Vycy9sZXdpcy9SZXNlYXJjaC9vbGQvcm91dGVzL2FwcC9jb21wb25lbnRzL2dyaWQvZ3JpZC5jb2ZmZWUiLCIvVXNlcnMvbGV3aXMvUmVzZWFyY2gvb2xkL3JvdXRlcy9hcHAvZGlyZWN0aXZlcy9zaGlmdGVyLmNvZmZlZSIsIi9Vc2Vycy9sZXdpcy9SZXNlYXJjaC9vbGQvcm91dGVzL2FwcC9oZWxwZXJzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLFlBQUEsQ0FBQTtBQUFBLElBQUEsZ0JBQUE7O0FBQUEsT0FDQSxHQUFVLE9BQUEsQ0FBUSxTQUFSLENBRFYsQ0FBQTs7QUFBQSxFQUVBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FGTCxDQUFBOztBQUFBLEdBR0EsR0FBTSxPQUFPLENBQUMsTUFBUixDQUFlLFNBQWYsRUFBMEIsQ0FBQyxPQUFBLENBQVEsa0JBQVIsQ0FBRCxDQUExQixDQUNMLENBQUMsU0FESSxDQUNNLFNBRE4sRUFDaUIsT0FBQSxDQUFRLHdCQUFSLENBRGpCLENBRUwsQ0FBQyxTQUZJLENBRU0sV0FGTixFQUVtQixPQUFBLENBQVEsMEJBQVIsQ0FGbkIsQ0FRTCxDQUFDLFNBUkksQ0FRTSxTQVJOLEVBUWtCLE9BQUEsQ0FBUSxzQkFBUixDQVJsQixDQUhOLENBQUE7Ozs7O0FDQUEsSUFBQSxzQkFBQTs7QUFBQSxPQUFBLENBQVEsZUFBUixDQUFBLENBQUE7O0FBQUEsQ0FDQSxHQUFJLE9BQUEsQ0FBUSxRQUFSLENBREosQ0FBQTs7QUFBQSxRQUVBLEdBQVcsZ3BCQUZYLENB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Q0FBQSxDQUFmLEdBQWtCLEdBQWxCLEdBQXFCLENBQUUsQ0FBQSxDQUFBLENBQXZCLEdBQTBCLEdBQWpELENBQUEsQ0FMRDtTQUFBO2VBT0EsRUFBRSxDQUFDLE1BQUgsQ0FBVSxFQUFHLENBQUEsQ0FBQSxDQUFiLEVBUlM7TUFBQSxDQUhWLENBQUE7YUFjQSxLQUFLLENBQUMsTUFBTixDQUFhLFNBQUEsR0FBQTtlQUNYLE1BQUEsQ0FBTyxJQUFJLENBQUMsT0FBWixDQUFBLENBQXFCLEtBQXJCLEVBRFc7TUFBQSxDQUFiLEVBRUcsT0FGSCxFQUdHLElBSEgsRUFmSztJQUFBLENBRE47SUFGSTtBQUFBLENBRk4sQ0FBQTs7QUFBQSxNQXlCTSxDQUFDLE9BQVAsR0FBaUIsR0F6QmpCLENBQUE7Ozs7O0FDQUEsWUFBQSxDQUFBO0FBQUEsTUFFTSxDQUFDLE9BQU8sQ0FBQyxPQUFmLEdBQXlCLFNBQUMsR0FBRCxFQUFNLElBQU4sR0FBQTtTQUN2QixFQUFFLENBQUMsS0FBSCxDQUFTLENBQUEsU0FBQSxLQUFBLEdBQUE7V0FBQSxTQUFBLEdBQUE7QUFDUixNQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUE7YUFDQSxLQUZRO0lBQUEsRUFBQTtFQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBVCxFQUdDLElBSEQsRUFEdUI7QUFBQSxDQUZ6QixDQUFBOztBQUFBLFFBU1EsQ0FBQSxTQUFFLENBQUEsUUFBVixHQUFxQixTQUFDLElBQUQsRUFBTyxJQUFQLEdBQUE7U0FDbkIsTUFBTSxDQUFDLGNBQVAsQ0FBc0IsSUFBQyxDQUFBLFNBQXZCLEVBQWtDLElBQWxDLEVBQXdDLElBQXhDLEVBRG1CO0FBQUEsQ0FUckIsQ0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIndXNlIHN0cmljdCdcbmFuZ3VsYXIgPSByZXF1aXJlICdhbmd1bGFyJ1xuZDMgPSByZXF1aXJlICdkMydcbmFwcCA9IGFuZ3VsYXIubW9kdWxlICdtYWluQXBwJywgW3JlcXVpcmUgJ2FuZ3VsYXItbWF0ZXJpYWwnXVxuXHQuZGlyZWN0aXZlICdncmlkRGVyJywgcmVxdWlyZSAnLi9jb21wb25lbnRzL2dyaWQvZ3JpZCdcblx0LmRpcmVjdGl2ZSAnY2lyY2xlRGVyJywgcmVxdWlyZSAnLi9jb21wb25lbnRzL2dyaWQvY2lyY2xlJ1xuXHQjIC5cblx0IyAuZGlyZWN0aXZlICdob3JBeGlzRGVyJywgcmVxdWlyZSAnLi9kaXJlY3RpdmVzL3hBeGlzJ1xuXHQjIC5kaXJlY3RpdmUgJ3ZlckF4aXNEZXInLCByZXF1aXJlICcuL2RpcmVjdGl2ZXMveUF4aXMnXG5cdCMgLmRpcmVjdGl2ZSAnY2FydFNpbURlcicsIHJlcXVpcmUgJy4vY29tcG9uZW50cy9jYXJ0L2NhcnRTaW0nXG5cdCMgLmRpcmVjdGl2ZSAnY2FydE9iamVjdERlcicsIHJlcXVpcmUgJy4vY29tcG9uZW50cy9jYXJ0L2NhcnRPYmplY3QnXG5cdC5kaXJlY3RpdmUgJ3NoaWZ0ZXInICwgcmVxdWlyZSAnLi9kaXJlY3RpdmVzL3NoaWZ0ZXInXG5cdCMgLmRpcmVjdGl2ZSAnYmVoYXZpb3InLCByZXF1aXJlICcuL2RpcmVjdGl2ZXMvYmVoYXZpb3InXG5cdCMgLmRpcmVjdGl2ZSAnZG90QURlcicsIHJlcXVpcmUgJy4vY29tcG9uZW50cy9kZXNpZ24vZG90QSdcblx0IyAuZGlyZWN0aXZlICdkb3RCRGVyJywgcmVxdWlyZSAnLi9jb21wb25lbnRzL2Rlc2lnbi9kb3RCJ1xuXHQjIC5kaXJlY3RpdmUgJ2RhdHVtJywgcmVxdWlyZSAnLi9kaXJlY3RpdmVzL2RhdHVtJ1xuXHQjIC5kaXJlY3RpdmUgJ2QzRGVyJywgcmVxdWlyZSAnLi9kaXJlY3RpdmVzL2QzRGVyJ1xuXHQjIC5kaXJlY3RpdmUgJ2Rlc2lnbkFEZXInLCByZXF1aXJlICcuL2NvbXBvbmVudHMvZGVzaWduL2Rlc2lnbkEnXG5cdCMgLmRpcmVjdGl2ZSAnZGVzaWduQkRlcicgLCByZXF1aXJlICcuL2NvbXBvbmVudHMvZGVzaWduL2Rlc2lnbkInXG5cdCMgLmRpcmVjdGl2ZSAnZGVyaXZhdGl2ZUFEZXInLCByZXF1aXJlICcuL2NvbXBvbmVudHMvZGVyaXZhdGl2ZS9kZXJpdmF0aXZlQSdcblx0IyAuZGlyZWN0aXZlICdkZXJpdmF0aXZlQkRlcicsIHJlcXVpcmUgJy4vY29tcG9uZW50cy9kZXJpdmF0aXZlL2Rlcml2YXRpdmVCJ1xuXHQjIC5kaXJlY3RpdmUgJ2NhcnRQbG90RGVyJywgcmVxdWlyZSAnLi9jb21wb25lbnRzL2NhcnQvY2FydFBsb3QnXG5cdCMgLmRpcmVjdGl2ZSAnZGVzaWduQ2FydEFEZXInLCByZXF1aXJlICcuL2NvbXBvbmVudHMvZGVzaWduL2Rlc2lnbkNhcnRBJ1xuXHQjIC5kaXJlY3RpdmUgJ2Rlc2lnbkNhcnRCRGVyJywgcmVxdWlyZSAnLi9jb21wb25lbnRzL2Rlc2lnbi9kZXNpZ25DYXJ0Qidcblx0IyAuZGlyZWN0aXZlICd0ZXh0dXJlRGVyJywgcmVxdWlyZSAnLi9kaXJlY3RpdmVzL3RleHR1cmUnXG5cdCMgLmRpcmVjdGl2ZSAnYm9pbGVycGxhdGVEZXInLCByZXF1aXJlICcuL2RpcmVjdGl2ZXMvYm9pbGVycGxhdGUnXG5cdCMgLmRpcmVjdGl2ZSAnY2FydERlcicgLCByZXF1aXJlICcuL2RpcmVjdGl2ZXMvY2FydERlcidcblx0IyAuc2VydmljZSAnZGVyaXZhdGl2ZURhdGEnLCByZXF1aXJlICcuL2NvbXBvbmVudHMvZGVyaXZhdGl2ZS9kZXJpdmF0aXZlRGF0YSdcblx0IyAuc2VydmljZSAnZmFrZUNhcnQnLCByZXF1aXJlICcuL2NvbXBvbmVudHMvZGVzaWduL2Zha2VDYXJ0J1xuXHQjIC5zZXJ2aWNlICd0cnVlQ2FydCcsIHJlcXVpcmUgJy4vY29tcG9uZW50cy9kZXNpZ24vdHJ1ZUNhcnQnXG5cdCMgLnNlcnZpY2UgJ2Rlc2lnbkRhdGEnLCByZXF1aXJlICcuL2NvbXBvbmVudHMvZGVzaWduL2Rlc2lnbkRhdGEnXG5cdCMgLnNlcnZpY2UgJ2NhcnREYXRhJywgcmVxdWlyZSAnLi9jb21wb25lbnRzL2NhcnQvY2FydERhdGEnXG5cbiIsInJlcXVpcmUgJy4uLy4uL2hlbHBlcnMnXG5fID0gcmVxdWlyZSAnbG9kYXNoJ1xudGVtcGxhdGUgPSAnJydcblx0PHN2ZyBuZy1hdHRyLXdpZHRoPSd7ezo6dm0ud2lkdGgrdm0ubWFyLmxlZnQrdm0ubWFyLnJpZ2h0fX0nIG5nLWF0dHItaGVpZ2h0PSd7ezo6dm0uaGVpZ2h0ICsgdm0ubWFyLnRvcCArdm0ubWFyLmJvdHRvbX19JyBjbGFzcz0nYm90dG9tQ2hhcnQnID5cblx0XHQ8ZyBjbGFzcz0nbWFpbicgc2hpZnRlcj0nW3ZtLm1hci5sZWZ0LCB2bS5tYXIudG9wXSc+XG5cdFx0XHQ8Y2lyY2xlIGNsYXNzPSdiYWNrZ3JvdW5kJyBuZy1hdHRyLXI9J3t7dm0uaGVpZ2h0LzJ9fScgc2hpZnRlcj0nW3ZtLndpZHRoLzIsIHZtLmhlaWdodC8yXScvPlxuXHRcdFx0PGcgY2xhc3M9J2ctZG90cycgc2hpZnRlcj0nW3ZtLndpZHRoLzIsLXZtLmhlaWdodC8yXSc+PC9nPlxuXHRcdDwvZz5cblx0PC9zdmc+XG5cdDxzdmcgd2lkdGg9Jzc1JyBuZy1hdHRyLWhlaWdodD0ne3s6OnZtLmhlaWdodCArIHZtLm1hci50b3AgK3ZtLm1hci5ib3R0b219fScgPlxuXHRcdDxnIGNsYXNzPSdtYWluJyBzaGlmdGVyPSdbdm0ubWFyLmxlZnQsIHZtLm1hci50b3BdJz5cblx0XHRcdDxyZWN0IGNsYXNzPSdhdmcnIHdpZHRoPSc3NScgbmctYXR0ci15PSd7e3ZtLmhlaWdodCAtIHZtLmF2Z319JyBuZy1hdHRyLWhlaWdodD0ne3t2bS5hdmd9fScvPlxuXHRcdDwvZz5cblx0PC9zdmc+XG4nJydcblxuY2xhc3MgQ3RybFxuXHRjb25zdHJ1Y3RvcjogKEBzY29wZSwgQGVsLCBAd2luZG93KS0+XG5cdFx0QHdpZHRoID0gNTAwXG5cdFx0QGhlaWdodD01MDBcblx0XHRAbWFyID0gXG5cdFx0XHRsZWZ0OiAyMFxuXHRcdFx0dG9wOiAxMFxuXHRcdFx0cmlnaHQ6IDE1XG5cdFx0XHRib3R0b206IDMwXG5cblx0XHRWID1kMy5zY2FsZS5saW5lYXIoKS5kb21haW4gWzAsNTBdXG5cdFx0XHQucmFuZ2UgW0BoZWlnaHQsIDBdXG5cdFx0SCA9IGQzLnNjYWxlLmxpbmVhcigpLmRvbWFpbiBbMCw1MF1cblx0XHRcdC5yYW5nZSBbMCxAd2lkdGhdXG5cdFx0c2FtcCA9IC0+XG5cdFx0XHR0ID0gMipNYXRoLlBJKk1hdGgucmFuZG9tKClcblx0XHRcdHUgPSBNYXRoLnJhbmRvbSgpICsgTWF0aC5yYW5kb20oKVxuXHRcdFx0ciA9IGlmIHUgPjEgdGhlbiAyLXUgZWxzZSB1XG5cdFx0XHRyZXMgPSBcblx0XHRcdFx0dGhldGE6IHRcblx0XHRcdFx0cjogciAqIDI1XG5cblx0XHRAbGluZXMgPSBbXVxuXHRcdF8ucmFuZ2UgMCwgMjAwMFxuXHRcdFx0LmZvckVhY2ggPT5cblxuXHRcdFx0XHRhID0gc2FtcCgpXG5cblx0XHRcdFx0YiA9IHNhbXAoKVxuXG5cdFx0XHRcdGlmIE1hdGguYWJzKGEudGhldGEgLSBiLnRoZXRhKSA8IDJcblx0XHRcdFx0XHRpZiBhLnIgPD0gYi5yXG5cdFx0XHRcdFx0XHR3aGljaCA9ICsoKGEudGhldGEgLSBiLnRoZXRhKSA+IDApXG5cdFx0XHRcdFx0XHRyZXMgPSBcIk0gI3tIKGEucipNYXRoLmNvcyhhLnRoZXRhKSl9ICN7VihhLnIqTWF0aC5zaW4oYS50aGV0YSkpfSBBICN7SChhLnIpfSAsICN7SChhLnIpfSAwICAwLCN7d2hpY2h9ICN7SChhLnIqTWF0aC5jb3MoYi50aGV0YSkpfSAje1YoYS5yKk1hdGguc2luKGIudGhldGEpKX0gTCAje0goYi5yKk1hdGguY29zKGIudGhldGEpKX0gI3tWKGIucipNYXRoLnNpbihiLnRoZXRhKSl9XCJcblx0XHRcdFx0XHRcdEBsaW5lcy5wdXNoIHJlc1xuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdHdoaWNoID0gKygoYS50aGV0YSAtIGIudGhldGEgKSA8IDApXG5cdFx0XHRcdFx0XHRyZXMgPSBcIk0gI3tIKGIucipNYXRoLmNvcyhiLnRoZXRhKSl9ICAje1YoYi5yKk1hdGguc2luKGIudGhldGEpKX0gQSAje0goYi5yKX0gLCAje0goYi5yKX0gMCAgMCwje3doaWNofSAje0goYi5yKk1hdGguY29zKGEudGhldGEpKX0gI3tWKGIucipNYXRoLnNpbihhLnRoZXRhKSl9IEwgI3tIKGEucipNYXRoLmNvcyhhLnRoZXRhKSl9ICN7VihhLnIqTWF0aC5zaW4oYS50aGV0YSkpfVwiXG5cdFx0XHRcdFx0XHRAbGluZXMucHVzaCByZXNcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHJlcyA9IFwiTSAje0goYS5yKk1hdGguY29zKGEudGhldGEpKX0gICN7VihhLnIqTWF0aC5zaW4oYS50aGV0YSkpfSBMICN7SCgwKX0gI3tWKDApfSBMICN7SChiLnIqTWF0aC5jb3MoYi50aGV0YSkpfSAgI3tWKGIucipNYXRoLnNpbihiLnRoZXRhKSl9XCJcblx0XHRcdFx0XHRAbGluZXMucHVzaCByZXNcblxuXHRcdGc9IGQzLnNlbGVjdCBAZWxbMF1cblx0XHRcdC5zZWxlY3QgJy5tYWluJ1xuXG5cdFx0bGluZXMgPSBnLnNlbGVjdCAnLmctZG90cydcblx0XHRcdC5zZWxlY3RBbGwgJ2xpbmVzJ1xuXHRcdFx0LmRhdGEgQGxpbmVzLm1hcCAoZCktPlxuXHRcdFx0XHRyZXMgPSBcblx0XHRcdFx0XHRsaW5lOiBkXG5cdFx0XHRcdFx0bDogMFxuXHRcdFx0LmVudGVyKClcblx0XHRcdC5hcHBlbmQgJ3BhdGgnXG5cdFx0XHQuYXR0clxuXHRcdFx0XHRjbGFzczogJ3JvdXRlJ1xuXHRcdFx0XHRkOiAoZCktPmQubGluZVxuXHRcdGxlbmd0aHMgPSBbXVxuXHRcdGxpbmVzLmF0dHIgJ3N0cm9rZS1kYXNoYXJyYXknLCAoZCktPlxuXHRcdFx0XHRsID0gZDMuc2VsZWN0IHRoaXNcblx0XHRcdFx0XHQubm9kZSgpXG5cdFx0XHRcdFx0LmdldFRvdGFsTGVuZ3RoKClcblx0XHRcdFx0bGVuZ3Rocy5wdXNoIGxcblx0XHRcdFx0XCIje2x9LCN7bH1cIlxuXHRcdFx0LmF0dHIgJ3N0cm9rZS1kYXNob2Zmc2V0JzogKGQpLT5cblx0XHRcdFx0bCA9IGQzLnNlbGVjdCB0aGlzXG5cdFx0XHRcdFx0Lm5vZGUoKVxuXHRcdFx0XHRcdC5nZXRUb3RhbExlbmd0aCgpXG5cdFx0XHRcdGxcblx0XHRhdmcgPSAwXG5cdFx0YXZlcmFnZXMgPSBsZW5ndGhzLm1hcCAobCxpKS0+XG5cdFx0XHRhdmcgPSAoYXZnICogaSArIGwpLyhpKzEpXG5cdFx0QGF2ZyA9IDBcblx0XHRjb25zb2xlLmxvZyBhdmVyYWdlc1xuXHRcdGxpbmVzLnRyYW5zaXRpb24oKVxuXHRcdFx0LmVhc2UgJ2N1YmljJ1xuXHRcdFx0LmR1cmF0aW9uIDEyMDBcblx0XHRcdC5kZWxheSAoZCxpKS0+XG5cdFx0XHRcdDE1MDAraSo4XG5cdFx0XHQuYXR0ciAnc3Ryb2tlLWRhc2hvZmZzZXQnLCAwXG5cdFx0XHQjIC50cmFuc2l0aW9uKClcblx0XHRcdC5lYWNoICdlbmQnLCAoZCxpKT0+XG5cdFx0XHRcdEBhdmcgPSBhdmVyYWdlc1tpXVxuXHRcdFx0XHRAc2NvcGUuJGV2YWxBc3luYygpXG5cblxuZGVyID0gLT5cblx0ZGlyZWN0aXZlID0gXG5cdFx0Y29udHJvbGxlckFzOiAndm0nXG5cdFx0c2NvcGU6IHt9XG5cdFx0dGVtcGxhdGU6IHRlbXBsYXRlXG5cdFx0dGVtcGxhdGVOYW1lc3BhY2U6ICdzdmcnXG5cdFx0Y29udHJvbGxlcjogWyckc2NvcGUnLCckZWxlbWVudCcsICckd2luZG93JywgQ3RybF1cblxubW9kdWxlLmV4cG9ydHMgPSBkZXJcbiIsInJlcXVpcmUgJy4uLy4uL2hlbHBlcnMnXG5fID0gcmVxdWlyZSAnbG9kYXNoJ1xudGVtcGxhdGUgPSAnJydcblx0PHN2ZyBuZy1hdHRyLXdpZHRoPSd7ezo6dm0ud2lkdGgrdm0ubWFyLmxlZnQrdm0ubWFyLnJpZ2h0fX0nIG5nLWF0dHItaGVpZ2h0PSd7ezo6dm0uaGVpZ2h0ICsgdm0ubWFyLnRvcCArdm0ubWFyLmJvdHRvbX19JyAgPlxuXHRcdDxnIGNsYXNzPSdtYWluJyBzaGlmdGVyPSdbdm0ubWFyLmxlZnQsIHZtLm1hci50b3BdJz5cblx0XHRcdDxyZWN0IGNsYXNzPSdiYWNrZ3JvdW5kJyBuZy1hdHRyLXdpZHRoPSd7ezo6dm0ud2lkdGh9fScgbmctYXR0ci1oZWlnaHQ9J3t7Ojp2bS5oZWlnaHR9fScvPlxuXHRcdFx0PGcgY2xhc3M9J2ctZG90cyc+PC9nPlxuXHRcdDwvZz5cblx0PC9zdmc+XG5cdDxzdmcgd2lkdGg9Jzc1JyBuZy1hdHRyLWhlaWdodD0ne3s6OnZtLmhlaWdodCArIHZtLm1hci50b3AgK3ZtLm1hci5ib3R0b219fScgPlxuXHRcdDxnIGNsYXNzPSdtYWluJyBzaGlmdGVyPSdbdm0ubWFyLmxlZnQsIHZtLm1hci50b3BdJz5cblx0XHRcdDxyZWN0IGNsYXNzPSdhdmcnIHdpZHRoPSc3NScgbmctYXR0ci15PSd7e3ZtLmhlaWdodCAtIHZtLmF2ZXJhZ2V9fScgbmctYXR0ci1oZWlnaHQ9J3t7dm0uYXZlcmFnZSB9fScvPlxuXHRcdDwvZz5cblx0PC9zdmc+XG4nJydcblxuY2xhc3MgQ3RybFxuXHRjb25zdHJ1Y3RvcjogKEBzY29wZSwgQGVsLCBAd2luZG93LEBlbGVtZW50KS0+XG5cdFx0QHdpZHRoID0gNTAwXG5cdFx0QGhlaWdodD01MDBcblx0XHRAbWFyID0gXG5cdFx0XHRsZWZ0OiA1XG5cdFx0XHR0b3A6IDEwXG5cdFx0XHRyaWdodDogNVxuXHRcdFx0Ym90dG9tOiAzMFxuXG5cdFx0QFZlciA9ZDMuc2NhbGUubGluZWFyKCkuZG9tYWluIFswLDUwXVxuXHRcdFx0LnJhbmdlIFtAaGVpZ2h0LCAwXVxuXHRcdEBIb3IgPSBkMy5zY2FsZS5saW5lYXIoKS5kb21haW4gWzAsNTBdXG5cdFx0XHQucmFuZ2UgWzAsQHdpZHRoXVxuXG5cdFx0QGxpbmVzID0gW11cblx0XHR3aGljaCA9IHRydWVcblx0XHRfLnJhbmdlKCAwLCAyMDAwKVxuXHRcdFx0LmZvckVhY2ggKGkpPT5cblx0XHRcdFx0ZCA9IFtcblx0XHRcdFx0XHRcdHsgeDogTWF0aC5yYW5kb20oKSo1MCx5OiBNYXRoLnJhbmRvbSgpKjUwfSxcblx0XHRcdFx0XHRcdHt4OiBNYXRoLnJhbmRvbSgpKjUwLCB5OiBNYXRoLnJhbmRvbSgpKjUwfVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0IyBsID0gTWF0aC5hYnMoZFswXS54IC0gZFsxXS54KSArIE1hdGguYWJzKGRbMF0ueSAtIGRbMV0ueSlcblx0XHRcdFx0IyBsZW5ndGhzLnB1c2ggbFxuXHRcdFx0XHRAbGluZXMucHVzaFx0W1xuXHRcdFx0XHRcdFx0ZFswXSxcblx0XHRcdFx0XHRcdChpZiB3aGljaCB0aGVuIHt4OmRbMF0ueCx5OmRbMV0ueX0gZWxzZSB7eDpkWzFdLngseTpkWzBdLnl9ICksXG5cdFx0XHRcdFx0XHRkWzFdXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHR3aGljaCA9ICF3aGljaFxuXG5cblx0XHRAbGluZUZ1biA9IGQzLnN2Zy5saW5lKClcblx0XHRcdC54IChkKT0+IEBIb3IgZC54XG5cdFx0XHQueSAoZCk9PiBAVmVyIGQueVxuXG5cdFx0ZyA9IGQzLnNlbGVjdCBAZWxlbWVudFswXVxuXHRcdFx0LnNlbGVjdCAnLm1haW4nXG5cblx0XHRsaW5lcyA9IGcuc2VsZWN0ICcuZy1kb3RzJ1xuXHRcdFx0LnNlbGVjdEFsbCAnbGluZXMnXG5cdFx0XHQuZGF0YSBAbGluZXNcblx0XHRcdC5lbnRlcigpXG5cdFx0XHQuYXBwZW5kICdwYXRoJ1xuXHRcdFx0LmF0dHJcblx0XHRcdFx0Y2xhc3M6ICdyb3V0ZSdcblx0XHRcdFx0ZDogQGxpbmVGdW5cblx0XHRsZW5ndGhzID0gW11cblxuXHRcdGxpbmVzLmF0dHIgJ3N0cm9rZS1kYXNoYXJyYXknLCAoZCktPlxuXHRcdFx0XHRsID0gZDMuc2VsZWN0IHRoaXNcblx0XHRcdFx0XHQubm9kZSgpXG5cdFx0XHRcdFx0LmdldFRvdGFsTGVuZ3RoKClcblx0XHRcdFx0bGVuZ3Rocy5wdXNoIGxcblx0XHRcdFx0XCIje2x9LCN7bH1cIlxuXHRcdFx0LmF0dHIgJ3N0cm9rZS1kYXNob2Zmc2V0JzogKGQpLT5cblx0XHRcdFx0bCA9IGQzLnNlbGVjdCB0aGlzXG5cdFx0XHRcdFx0Lm5vZGUoKVxuXHRcdFx0XHRcdC5nZXRUb3RhbExlbmd0aCgpXG5cdFx0XHRcdGxcblxuXHRcdGF2ZyA9IDBcblx0XHRhdmVyYWdlcyA9IGxlbmd0aHMubWFwIChsLGkpLT5cblx0XHRcdGF2ZyA9IChhdmcgKiBpICsgbCkvKGkrMSlcblxuXHRcdEBhdmVyYWdlID0gMFxuXG5cdFx0bGluZXMudHJhbnNpdGlvbiAnaGVsbG8nXG5cdFx0XHQuZWFzZSAnY3ViaWMnXG5cdFx0XHQuZHVyYXRpb24gNTAwXG5cdFx0XHQuZGVsYXkgKGQsaSktPlxuXHRcdFx0XHRpKjVcblx0XHRcdC5hdHRyICdzdHJva2UtZGFzaG9mZnNldCcsIDBcblx0XHRcdC50cmFuc2l0aW9uICcnXG5cdFx0XHQuZWFjaCAnZW5kJywgKGQsaSk9PlxuXHRcdFx0XHRAYXZlcmFnZSA9IGF2ZXJhZ2VzW2ldXG5cdFx0XHRcdEBzY29wZS4kZXZhbEFzeW5jKClcblxuZGVyID0gLT5cblx0ZGlyZWN0aXZlID0gXG5cdFx0Y29udHJvbGxlckFzOiAndm0nXG5cdFx0c2NvcGU6IHt9XG5cdFx0dGVtcGxhdGU6IHRlbXBsYXRlXG5cdFx0dGVtcGxhdGVOYW1lc3BhY2U6ICdzdmcnXG5cdFx0Y29udHJvbGxlcjogWyckc2NvcGUnLCckZWxlbWVudCcsICckd2luZG93JywgJyRlbGVtZW50JywgQ3RybF1cblxubW9kdWxlLmV4cG9ydHMgPSBkZXJcbiIsImQzID0gcmVxdWlyZSAnZDMnXG5cbmRlciA9ICgkcGFyc2UpLT5cblx0ZGlyZWN0aXZlID1cblx0XHRyZXN0cmljdDogJ0EnXG5cdFx0bGluazogKHNjb3BlLCBlbCwgYXR0ciktPlxuXHRcdFx0c2VsID0gZDMuc2VsZWN0IGVsWzBdXG5cdFx0XHR1ID0gJ3QtJyArIE1hdGgucmFuZG9tKClcblx0XHRcdHRyYW4gPSAkcGFyc2UoYXR0ci50cmFuKShzY29wZSlcblx0XHRcdHJlc2hpZnQgPSAodiktPiBcblx0XHRcdFx0aWYgdHJhblxuXHRcdFx0XHRcdHNlbC50cmFuc2l0aW9uIHVcblx0XHRcdFx0XHRcdC5hdHRyICd0cmFuc2Zvcm0nICwgXCJ0cmFuc2xhdGUoI3t2WzBdfSwje3ZbMV19KVwiXG5cdFx0XHRcdFx0XHQuY2FsbCB0cmFuXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRzZWwuYXR0ciAndHJhbnNmb3JtJyAsIFwidHJhbnNsYXRlKCN7dlswXX0sI3t2WzFdfSlcIlxuXG5cdFx0XHRcdGQzLnNlbGVjdCBlbFswXVxuXHRcdFx0XHRcdFxuXG5cdFx0XHRzY29wZS4kd2F0Y2ggLT5cblx0XHRcdFx0XHQkcGFyc2UoYXR0ci5zaGlmdGVyKShzY29wZSlcblx0XHRcdFx0LCByZXNoaWZ0XG5cdFx0XHRcdCwgdHJ1ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlciIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cy50aW1lb3V0ID0gKGZ1biwgdGltZSktPlxuXHRcdGQzLnRpbWVyKCgpPT5cblx0XHRcdGZ1bigpXG5cdFx0XHR0cnVlXG5cdFx0LHRpbWUpXG5cblxuRnVuY3Rpb246OnByb3BlcnR5ID0gKHByb3AsIGRlc2MpIC0+XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBAcHJvdG90eXBlLCBwcm9wLCBkZXNjIl19
