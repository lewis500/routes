(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';
var angular, app, d3;

angular = require('angular');

d3 = require('d3');

app = angular.module('mainApp', [require('angular-material')]).directive('gridDer', require('./components/grid/grid')).directive('circleDer', require('./components/grid/circle')).directive('shifter', require('./directives/shifter'));



},{"./components/grid/circle":2,"./components/grid/grid":3,"./directives/shifter":4,"angular":undefined,"angular-material":undefined,"d3":undefined}],2:[function(require,module,exports){
var Ctrl, _, der, link, template;

require('../../helpers');

_ = require('lodash');

template = '<svg ng-attr-width=\'{{::vm.width+vm.mar.left+vm.mar.right}}\' ng-attr-height=\'{{::vm.height + vm.mar.top +vm.mar.bottom}}\' class=\'bottomChart\' >\n	<g class=\'main\' shifter=\'[vm.mar.left, vm.mar.top]\'>\n		<circle class=\'background\' ng-attr-r=\'{{vm.height/2}}\' shifter=\'[vm.width/2, vm.height/2]\'/>\n		<g class=\'g-dots\' shifter=\'[vm.width/2,-vm.height/2]\'></g>\n	</g>\n</svg>';

Ctrl = (function() {
  function Ctrl(scope1, el1, window) {
    var H, V;
    this.scope = scope1;
    this.el = el1;
    this.window = window;
    this.width = 400;
    this.height = 400;
    this.mar = {
      left: 20,
      top: 10,
      right: 15,
      bottom: 30
    };
    V = d3.scale.linear().domain([0, 50]).range([this.height, 0]);
    H = d3.scale.linear().domain([0, 50]).range([0, this.width]);
    this.lines = [];
    _.range(0, 3000).forEach((function(_this) {
      return function() {
        var a, b, res, which;
        a = {
          theta: Math.random() * 2 * Math.PI,
          r: Math.random() * 25
        };
        b = {
          theta: Math.random() * 2 * Math.PI,
          r: Math.random() * 25
        };
        if (Math.abs(a.theta - b.theta) < 2) {
          if (a.r <= b.r) {
            which = +((a.theta - b.theta) > 0);
            res = "M " + (H(a.r * Math.cos(a.theta))) + " " + (V(a.r * Math.sin(a.theta))) + " A " + (H(a.r)) + " , " + (H(a.r)) + " 0  0," + which + " " + (H(a.r * Math.cos(b.theta))) + " " + (V(a.r * Math.sin(b.theta))) + " L " + (H(b.r * Math.cos(b.theta))) + " " + (V(b.r * Math.sin(b.theta)));
            return _this.lines.push(res);
          } else {
            which = +((a.theta - b.theta) < 0);
            res = "M " + (H(b.r * Math.cos(b.theta))) + "  " + (V(b.r * Math.sin(b.theta))) + " A " + (H(b.r)) + " , " + (H(b.r)) + " 0  0," + which + " " + (H(b.r * Math.cos(a.theta))) + " " + (V(b.r * Math.sin(a.theta))) + " L " + (H(a.r * Math.cos(a.theta))) + " " + (V(a.r * Math.sin(a.theta)));
            return _this.lines.push(res);
          }
        } else {
          res = "M " + (H(a.r * Math.cos(a.theta))) + "  " + (V(a.r * Math.sin(a.theta))) + " L " + (H(0)) + " " + (V(0)) + " L " + (H(b.r * Math.cos(b.theta))) + "  " + (V(b.r * Math.sin(b.theta)));
          return _this.lines.push(res);
        }
      };
    })(this));
  }

  return Ctrl;

})();

link = function(scope, el, attr, vm) {
  var g;
  g = d3.select(el[0]).select('.main');
  return g.select('.g-dots').selectAll('lines').data(vm.lines).enter().append('path').attr({
    "class": 'route',
    d: function(d) {
      return d;
    }
  });
};

der = function() {
  var directive;
  return directive = {
    controllerAs: 'vm',
    scope: {},
    template: template,
    templateNamespace: 'svg',
    link: link,
    controller: ['$scope', '$element', '$window', Ctrl]
  };
};

module.exports = der;



},{"../../helpers":5,"lodash":undefined}],3:[function(require,module,exports){
var Ctrl, _, der, link, template;

require('../../helpers');

_ = require('lodash');

template = '<svg ng-attr-width=\'{{::vm.width+vm.mar.left+vm.mar.right}}\' ng-attr-height=\'{{::vm.height + vm.mar.top +vm.mar.bottom}}\' class=\'bottomChart\' >\n	<g class=\'main\' shifter=\'[vm.mar.left, vm.mar.top]\'>\n		<rect class=\'background\' ng-attr-width=\'{{vm.width}}\' ng-attr-height=\'{{vm.height}}\'/>\n		<g class=\'g-dots\'></g>\n	</g>\n</svg>';

Ctrl = (function() {
  function Ctrl(scope1, el1, window) {
    var which;
    this.scope = scope1;
    this.el = el1;
    this.window = window;
    this.width = 400;
    this.height = 400;
    this.mar = {
      left: 20,
      top: 10,
      right: 15,
      bottom: 30
    };
    this.Ver = d3.scale.linear().domain([0, 50]).range([this.height, 0]);
    this.Hor = d3.scale.linear().domain([0, 50]).range([0, this.width]);
    this.lines = [];
    which = true;
    this.ODs = _.range(0, 3000).map((function(_this) {
      return function() {
        var d;
        d = [
          {
            x: Math.random() * 50,
            y: Math.random() * 50
          }, {
            x: Math.random() * 50,
            y: Math.random() * 50
          }
        ];
        _this.lines.push([
          d[0], (which ? {
            x: d[0].x,
            y: d[1].y
          } : {
            x: d[1].x,
            y: d[0].y
          }), d[1]
        ]);
        which = !which;
        return d;
      };
    })(this));
    this.lineFun = d3.svg.line().x((function(_this) {
      return function(d) {
        return _this.Hor(d.x);
      };
    })(this)).y((function(_this) {
      return function(d) {
        return _this.Ver(d.y);
      };
    })(this));
  }

  return Ctrl;

})();

link = function(scope, el, attr, vm) {
  var g;
  g = d3.select(el[0]).select('.main');
  return g.select('.g-dots').selectAll('lines').data(vm.lines).enter().append('path').attr({
    "class": 'route',
    d: vm.lineFun
  });
};

der = function() {
  var directive;
  return directive = {
    controllerAs: 'vm',
    scope: {},
    template: template,
    templateNamespace: 'svg',
    link: link,
    controller: ['$scope', '$element', '$window', Ctrl]
  };
};

module.exports = der;



},{"../../helpers":5,"lodash":undefined}],4:[function(require,module,exports){
var d3, der;

d3 = require('d3');

der = function($parse) {
  var directive;
  return directive = {
    restrict: 'A',
    link: function(scope, el, attr) {
      var reshift, sel, tran, u;
      sel = d3.select(el[0]);
      u = 't-' + Math.random();
      tran = $parse(attr.tran)(scope);
      reshift = function(v) {
        if (tran) {
          sel.transition(u).attr('transform', "translate(" + v[0] + "," + v[1] + ")").call(tran);
        } else {
          sel.attr('transform', "translate(" + v[0] + "," + v[1] + ")");
        }
        return d3.select(el[0]);
      };
      return scope.$watch(function() {
        return $parse(attr.shifter)(scope);
      }, reshift, true);
    }
  };
};

module.exports = der;



},{"d3":undefined}],5:[function(require,module,exports){
'use strict';
module.exports.timeout = function(fun, time) {
  return d3.timer((function(_this) {
    return function() {
      fun();
      return true;
    };
  })(this), time);
};

Function.prototype.property = function(prop, desc) {
  return Object.defineProperty(this.prototype, prop, desc);
};



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
